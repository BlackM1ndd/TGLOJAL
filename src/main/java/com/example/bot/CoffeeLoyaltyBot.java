package com.example.bot;

import com.example.entity.UserState;
import com.example.service.UserService;
import com.example.service.LoyaltyService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Component
public class CoffeeLoyaltyBot extends TelegramLongPollingBot {
    private static final Logger logger = LoggerFactory.getLogger(CoffeeLoyaltyBot.class);

    private final UserService userService;
    private final LoyaltyService loyaltyService;

    private final Map<Long, UserState> userStates = new HashMap<>();
    private final Map<Long, String> tempData = new HashMap<>();

    public CoffeeLoyaltyBot(UserService userService, LoyaltyService loyaltyService) {
        this.userService = userService;
        this.loyaltyService = loyaltyService;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();

            if (userStates.containsKey(chatId)) {
                handleState(chatId, messageText);
                return;
            }

            String[] args = messageText.split(" ");
            String command = args[0].toLowerCase();

            try {
                switch (command) {
                    case "/start", "—Å—Ç–∞—Ä—Ç" -> handleStart(chatId);
                    case "/help", "–ø–æ–º–æ—â—å" -> handleHelp(chatId);
                    case "/register", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" -> handleRegister(chatId);
                    case "/balance", "–±–∞–ª–∞–Ω—Å" -> handleBalance(chatId);
                    case "/addpoints", "–¥–æ–±–∞–≤–∏—Ç—å–±–∞–ª–ª—ã" -> initAddPoints(chatId);
                    case "/redeem", "—Å–ø–∏—Å–∞—Ç—å" -> handleRedeem(chatId);
                    case "/addemployee", "–¥–æ–±–∞–≤–∏—Ç—å—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞" -> handleAddEmployee(chatId, args);
                    case "/removeemployee", "—É–¥–∞–ª–∏—Ç—å—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞" -> handleRemoveEmployee(chatId, args);
                    default -> sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.");
                }
            } catch (Exception e) {
                logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {}", e.getMessage());
                sendMessage(chatId, "–û—à–∏–±–∫–∞: " + e.getMessage());
            }
        }
    }

    private void handleStart(long chatId) {
        sendMessage(chatId, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Coffee Loyalty! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.");
    }

    private void handleHelp(long chatId) {
        StringBuilder helpMessage = new StringBuilder("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!userService.isRegistered(chatId)) {
            // –ù–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            helpMessage.append("/start –∏–ª–∏ —Å—Ç–∞—Ä—Ç - –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞\n")
                    .append("/help –∏–ª–∏ –ø–æ–º–æ—â—å - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n")
                    .append("/register –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n");
        } else {
            // –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            helpMessage.append("/start –∏–ª–∏ —Å—Ç–∞—Ä—Ç - –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞\n")
                    .append("/help –∏–ª–∏ –ø–æ–º–æ—â—å - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n")
                    .append("/balance –∏–ª–∏ –±–∞–ª–∞–Ω—Å - —É–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å –±–∞–ª–ª–æ–≤\n");

            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –∞–∫—Ü–∏–∏
            helpMessage.append("üéâ –ê–∫—Ü–∏—è! üéâ\n")
                    .append("–ö—É–ø–∏—Ç–µ 10 –∫—Ä—É–∂–µ–∫ –∫–æ—Ñ–µ –∏ –ø–æ–ª—É—á–∏—Ç–µ –æ–¥–Ω—É –∫—Ä—É–∂–∫—É –≤ –ø–æ–¥–∞—Ä–æ–∫!\n");

            if (userService.isEmployee(userService.getPhoneNumberByChatId(chatId))) {
                // –°–æ—Ç—Ä—É–¥–Ω–∏–∫
                helpMessage.append("/addpoints –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å–±–∞–ª–ª—ã - –¥–æ–±–∞–≤–∏—Ç—å –±–∞–ª–ª—ã –∫–ª–∏–µ–Ω—Ç—É\n")
                        .append("/redeem –∏–ª–∏ —Å–ø–∏—Å–∞—Ç—å - —Å–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã\n");
            }

            if (userService.isAdmin(userService.getPhoneNumberByChatId(chatId))) {
                // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
                helpMessage.append("/addemployee –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ - –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n")
                        .append("/removeemployee –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ - —É–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n");
            }
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        sendMessage(chatId, helpMessage.toString());
    }

    private void handleState(long chatId, String messageText) {
        UserState state = userStates.get(chatId);

        switch (state) {
            case AWAITING_PHONE -> handleAwaitingPhone(chatId, messageText);
            case ADD_POINTS_AWAITING_PHONE -> handleAddPointsAwaitingPhone(chatId, messageText);
            case ADD_POINTS_AWAITING_AMOUNT -> handleAddPointsAwaitingAmount(chatId, messageText);
            case REDEEM_AWAITING_PHONE -> handleRedeemAwaitingPhone(chatId, messageText);
            case REDEEM_AWAITING_AMOUNT -> handleRedeemAwaitingAmount(chatId, messageText);
            case ADD_EMPLOYEE_AWAITING_PHONE -> handleAddEmployeeAwaitingPhone(chatId, messageText);
            case REMOVE_EMPLOYEE_AWAITING_PHONE ->handleRemoveEmployeeAwaitingPhone(chatId, messageText);
        }
    }

    private void handleAwaitingPhone(long chatId, String messageText) {
        try {
            userService.registerUser(chatId, messageText);
            sendMessage(chatId, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!");
            String promotionMessage = "üéâ –ê–∫—Ü–∏—è! üéâ\n" +
                    "–ö—É–ø–∏—Ç–µ 10 –∫—Ä—É–∂–µ–∫ –∫–æ—Ñ–µ –∏ –ø–æ–ª—É—á–∏—Ç–µ –æ–¥–Ω—É –∫—Ä—É–∂–∫—É –≤ –ø–æ–¥–∞—Ä–æ–∫! " +
                    "–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è —Å–≤–æ–∏–º –ª—é–±–∏–º—ã–º –Ω–∞–ø–∏—Ç–∫–æ–º!" +
                    "–ù–∞–∂–º–∏ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥";
            sendMessage(chatId, promotionMessage);
        } catch (Exception e) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: " + e.getMessage());
        } finally {
            userStates.remove(chatId);
        }
    }

    private void handleAddPointsAwaitingPhone(long chatId, String messageText) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞
        tempData.put(chatId, messageText);
        sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:");
        userStates.put(chatId, UserState.ADD_POINTS_AWAITING_AMOUNT);
    }

    private void handleAddPointsAwaitingAmount(long chatId, String messageText) {
        try {
            String employeePhoneNumber = userService.getPhoneNumberByChatId(chatId); // –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            String userPhoneNumber = tempData.get(chatId); // –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞
            int points = Integer.parseInt(messageText); // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è

            // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤
            loyaltyService.addPoints(employeePhoneNumber, userPhoneNumber, points);

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤
            long userChatId = userService.getChatIdByPhoneNumber(userPhoneNumber); // –ü–æ–ª—É—á–∞–µ–º chatId –∫–ª–∏–µ–Ω—Ç–∞
            sendMessage(userChatId, "–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ " + points + " –±–∞–ª–ª–æ–≤. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥!");

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤
            String notificationToAdmin = String.format("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ (–Ω–æ–º–µ—Ä: %s) –Ω–∞—á–∏—Å–ª–∏–ª %d –±–∞–ª–ª–æ–≤ –∫–ª–∏–µ–Ω—Ç—É (–Ω–æ–º–µ—Ä: %s).",
                    employeePhoneNumber, points, userPhoneNumber);

            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            List<Long> adminChatIds = userService.getAdminChatIds();
            for (Long adminChatId : adminChatIds) {
                sendMessage(adminChatId, notificationToAdmin); // –¢–µ–ø–µ—Ä—å adminChatId - long
            }

        } catch (NumberFormatException e) {
            sendMessage(chatId, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.");
        } catch (Exception e) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞: " + e.getMessage());
        } finally {
            userStates.remove(chatId);
            tempData.remove(chatId);
        }
    }

    private void handleRegister(long chatId) {
        sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:");
        userStates.put(chatId, UserState.AWAITING_PHONE);
    }

    private void handleBalance(long chatId) {
        try {
            int points = userService.getUserPoints(chatId);
            sendMessage(chatId, "–í–∞—à –±–∞–ª–∞–Ω—Å: " + points + " –±–∞–ª–ª–æ–≤.");
        } catch (Exception e) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    private void initAddPoints(long chatId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º
        String phoneNumber = userService.getPhoneNumberByChatId(chatId);
        if (!userService.isAdmin(phoneNumber) && !userService.isEmployee(phoneNumber)) {
            sendMessage(chatId, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.");
            return;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞
        sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤:");

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ –æ–Ω –≤–≤–æ–¥–∏—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        userStates.put(chatId, UserState.ADD_POINTS_AWAITING_PHONE);
    }

    private void handleRedeem(long chatId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º
        String phoneNumber = userService.getPhoneNumberByChatId(chatId);
        if (!userService.isAdmin(phoneNumber) && !userService.isEmployee(phoneNumber)) {
            sendMessage(chatId, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.");
            return;
        }

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É –∫–ª–∏–µ–Ω—Ç–∞
        sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–ª–æ–≤:");
        userStates.put(chatId, UserState.REDEEM_AWAITING_PHONE);
    }

    private void handleRedeemAwaitingPhone(long chatId, String messageText) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞
        tempData.put(chatId, messageText);
        sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 30):");
        userStates.put(chatId, UserState.REDEEM_AWAITING_AMOUNT);
    }

    private void handleRedeemAwaitingAmount(long chatId, String messageText) {
        try {
            int points = Integer.parseInt(messageText);
            if (points <= 0 || points > 30) {
                sendMessage(chatId, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 30.");
                return;
            }

            String userPhoneNumber = tempData.get(chatId); // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞
            long userChatId = userService.getChatIdByPhoneNumber(userPhoneNumber); // –ü–æ–ª—É—á–∞–µ–º chatId –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –µ–≥–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞

            // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–ª–æ–≤
            loyaltyService.redeemPoints(userChatId, points);

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ —Å–ø–∏—Å–∞–Ω–∏–∏ –±–∞–ª–ª–æ–≤
            sendMessage(userChatId, points + " –±–∞–ª–ª–æ–≤ –±—ã–ª–∏ —Å–ø–∏—Å–∞–Ω—ã —Å –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥!");

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ —Å–ø–∏—Å–∞–Ω–∏–∏ –±–∞–ª–ª–æ–≤
            String employeePhoneNumber = userService.getPhoneNumberByChatId(chatId); // –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            String notificationToAdmin = String.format("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ (–Ω–æ–º–µ—Ä: %s) —Å–ø–∏—Å–∞–ª %d –±–∞–ª–ª–æ–≤ —É –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–æ–º–µ—Ä: %s).",
                    employeePhoneNumber, points, userPhoneNumber);

            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            List<Long> adminChatIds = userService.getAdminChatIds();
            for (Long adminChatId : adminChatIds) {
                sendMessage(adminChatId, notificationToAdmin); // –¢–µ–ø–µ—Ä—å adminChatId - long
            }

        } catch (NumberFormatException e) {
            sendMessage(chatId, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.");
        } catch (Exception e) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞: " + e.getMessage());
        } finally {
            userStates.remove(chatId);
            tempData.remove(chatId);
        }
    }

    private void handleAddEmployee(long chatId, String[] args) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        String adminPhoneNumber = userService.getPhoneNumberByChatId(chatId);
        if (!userService.isAdmin(adminPhoneNumber)) {
            sendMessage(chatId, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.");
            return;
        }

        if (args.length < 2) {
            sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:");
            userStates.put(chatId, UserState.ADD_EMPLOYEE_AWAITING_PHONE);
            return;
        }

        // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        String employeePhoneNumber = args[1];
        handleAddEmployeeAwaitingPhone(chatId, employeePhoneNumber);
    }

    private void handleAddEmployeeAwaitingPhone(long chatId, String messageText) {
        String adminPhoneNumber = userService.getPhoneNumberByChatId(chatId);

        try {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            loyaltyService.addEmployee(adminPhoneNumber, messageText);
            sendMessage(chatId, "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω: " + messageText);
        } catch (Exception e) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞: " + e.getMessage());
        } finally {
            userStates.remove(chatId); // –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –æ–∂–∏–¥–∞—Ç—å –≤–≤–æ–¥ –¥–∞–ª—å—à–µ
        }
    }

    private void sendMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", e.getMessage());
        }
    }
    private void handleRemoveEmployee(long chatId, String[] args) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        String adminPhoneNumber = userService.getPhoneNumberByChatId(chatId);
        if (!userService.isAdmin(adminPhoneNumber)) {
            sendMessage(chatId, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.");
            return;
        }

        if (args.length < 2) {
            sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:");
            userStates.put(chatId, UserState.REMOVE_EMPLOYEE_AWAITING_PHONE);
            return;
        }

        // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω, —É–¥–∞–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        String employeePhoneNumber = args[1];
        handleRemoveEmployeeAwaitingPhone(chatId, employeePhoneNumber);
    }

    private void handleRemoveEmployeeAwaitingPhone(long chatId, String messageText) {
        String adminPhoneNumber = userService.getPhoneNumberByChatId(chatId);

        try {
            // –£–¥–∞–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            loyaltyService.removeEmployee(adminPhoneNumber, messageText);
            sendMessage(chatId, "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω: " + messageText);
        } catch (Exception e) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞: " + e.getMessage());
        } finally {
            userStates.remove(chatId); // –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –æ–∂–∏–¥–∞—Ç—å –≤–≤–æ–¥ –¥–∞–ª—å—à–µ
        }
    }

    @Override
    public String getBotUsername() {
        return "Tg4490_bot"; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    }

    @Override
    public String getBotToken() {
        return "7370408312:AAEorSyiTIGGvJ1mSPpoL6lziEvFWLK46YU"; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    }
}